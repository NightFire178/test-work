{"version":3,"sources":["redux/reducer/types/t-app-state.ts","redux/reducer/selector/app-state-selector.ts","router/auth.tsx","style/login.ts","const/api.ts","style/block/icon-theme-style.ts","component/block/icon-theme.tsx","component/login.tsx","style/chat.ts","component/chat/blocks/layout/window-layout.tsx","component/chat/blocks/chat-window.tsx","component/chat/blocks/user-list-window.tsx","component/chat/blocks/input-chat.tsx","component/chat/chat.tsx","router/router.tsx","redux/reducer/app-state.ts","socket-io/socket-io.ts","redux/reducer/reducer.ts","redux/store.ts","style/theme/dark-theme.ts","style/theme/white-theme.ts","router/material-ui-theme.tsx","index.tsx"],"names":["appStateActionEnum","appStateDarkModeSelector","state","appState","darkMode","appStateAuthStatus","authStatus","appStateChatSocket","chatSocket","Auth","Component","component","rest","auth","useSelector","render","props","to","useLoginStyle","makeStyles","theme","container","marginTop","paperContainer","padding","URI","ServerApi","appStateActionCreators","payload","type","SetDarkMode","SetAuthStatus","useIconThemeStyle","icon","cursor","IconTheme","style","dispatch","useDispatch","prefersDarkMode","handleChangeDarkModeStatus","Grid","className","item","WbSunny","onClick","Brightness3","Login","server","useState","joinFriendsTextField","setJoinFriendsTextField","status","uri","joinChat","setJoinChat","name","useRef","urlField","createEndMoveChat","useCallback","userName","current","idNow","value","split","joinRoom","id","setUserName","joinRoomDisconnect","justify","Container","maxWidth","Paper","direction","alignItems","spacing","TextField","inputRef","variant","placeholder","autoFocus","required","color","Button","size","useChatStyle","paper","gridContainer","minHeight","mainWindow","width","window","height","content","overflow","input","buttonUrl","whiteSpace","WindowLayout","children","xs","ChatWindow","chatMessages","setChatMessages","useEffect","messages","listenChat","message","push","console","log","length","map","obj","index","Fragment","UserListWindow","userList","setUserList","listenUserList","users","user","InputChat","handleSendMessage","element","sendChatMessage","sm","lg","Chat","alignContent","Router","path","exact","initialAppState","_socket","_userName","this","io","data","emit","sendMessage","getId","joinRom","on","off","chat","connected","disconnect","reducer","combineReducers","action","SetUserName","store","createStore","composeWithDevTools","matchMedia","matches","DarkTheme","primary","light","grey","main","dark","WhiteTheme","MaterialUiTheme","React","useMemo","createMuiTheme","palette","ThemeProvider","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f38c7a01.chunk.js","sourcesContent":["import {IServerChatApi} from \"../../../socket-io/socket-io\"\n\nexport enum appStateActionEnum {\n  SetDarkMode  = 'SET_THEME',\n  SetAuthStatus = 'SET_AUTH_STATUS',\n  SetUserName = 'SET_USER_NAME',\n  SetChatSocket = 'SET_CHAT_SOCKET'\n}\n\nexport const appStateActionCreators = {\n  setDarkMode : (payload:boolean):ISetThemeAction =>({type:appStateActionEnum.SetDarkMode, payload}),\n  setAuthStatus: (payload:boolean):ISetAuthStatus =>({type:appStateActionEnum.SetAuthStatus, payload}),\n  setUserName: (payload:string):ISetUserName => ({type:appStateActionEnum.SetUserName, payload}),\n  setChatSocket: (payload:IServerChatApi):ISetChatSocket=>({type:appStateActionEnum.SetChatSocket, payload})\n}\n\nexport interface IAppState {\n  darkMode:boolean,\n  authStatus: boolean,\n  userName: string,\n  chatSocket: IServerChatApi\n}\n\ninterface ISetChatSocket {\n  type: appStateActionEnum.SetChatSocket,\n  payload: IServerChatApi\n}\n\ninterface ISetUserName {\n  type: appStateActionEnum.SetUserName,\n  payload: string\n}\n\ninterface ISetAuthStatus {\n  type: appStateActionEnum.SetAuthStatus,\n  payload: boolean\n}\n\ninterface ISetThemeAction{\n  type: appStateActionEnum.SetDarkMode ,\n  payload:boolean\n}\n\nexport type appStateActionTypes =\n  ISetThemeAction |\n  ISetAuthStatus |\n  ISetUserName |\n  ISetChatSocket","import {StoreType} from \"../reducer\";\n\nexport const appStateDarkModeSelector = (state:StoreType) => state.appState.darkMode\nexport const appStateAuthStatus = (state:StoreType) => state.appState.authStatus\nexport const appStateUserName = (state:StoreType) => state.appState.userName\nexport const appStateChatSocket = (state:StoreType) => state.appState.chatSocket","import React, {FunctionComponent} from 'react';\nimport {useSelector} from 'react-redux'\nimport {Route, Redirect, RouteProps} from 'react-router-dom'\nimport {appStateAuthStatus} from \"../redux/reducer/selector/app-state-selector\";\n\n\ninterface AuthRoute extends RouteProps {\n  component: FunctionComponent\n}\n\nconst Auth: FunctionComponent<AuthRoute> = ({component: Component, ...rest}) => {\n  const auth = useSelector(appStateAuthStatus)\n  return <Route\n    {...rest}\n    render={\n      (props: React.ComponentProps<any>) => (auth ? <Component{...props}/> : <Redirect to={'/login'}/>)\n    }/>\n}\n\nexport default Auth;\n","import {makeStyles} from \"@material-ui/core/styles\";\n\nconst useLoginStyle = makeStyles((theme)=>({\n  container:{\n    marginTop: '10%'\n  },\n  paperContainer:{\n    padding: '30px'\n  },\n}))\n\nexport default useLoginStyle","export enum URI{\n  server = `localhost:3500`\n}\n\nexport enum ServerApi{\n  joinRom = `join-room`,\n  listenChat = `chat`,\n  listenUserList = `user-list`,\n  sendMessage = `chat-message`\n}","import {makeStyles} from \"@material-ui/core/styles\";\n\nconst useIconThemeStyle = makeStyles((theme)=>({\n  icon:{\n    marginTop:'6px',\n    \"&:hover\":{\n      cursor: 'pointer'\n    }\n  },\n}))\n\nexport default useIconThemeStyle","import React from 'react';\nimport {Grid} from \"@material-ui/core\";\nimport {Brightness3, WbSunny} from \"@material-ui/icons\";\nimport {appStateActionCreators} from \"../../redux/reducer/types/t-app-state\";\nimport useIconThemeStyle from \"../../style/block/icon-theme-style\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {appStateDarkModeSelector} from \"../../redux/reducer/selector/app-state-selector\";\n\ninterface IProps {\n\n}\n\ntype TProps = IProps\n\nconst IconTheme: React.FC<TProps> = (props) => {\n  const style = useIconThemeStyle()\n  const dispatch = useDispatch()\n  const prefersDarkMode = useSelector(appStateDarkModeSelector)\n  const handleChangeDarkModeStatus = () => {\n    dispatch(appStateActionCreators.setDarkMode(!prefersDarkMode))\n  }\n  return (<Grid className={style.icon} item>\n    {prefersDarkMode ?\n      <WbSunny onClick={handleChangeDarkModeStatus}/> :\n      < Brightness3 onClick={handleChangeDarkModeStatus}/>\n    }\n  </Grid>)\n}\n\nexport default IconTheme","import React, {useState, useRef, useCallback} from 'react';\nimport {Button, Container, Grid, Paper, TextField} from \"@material-ui/core\";\nimport useLoginStyle from \"../style/login\";\nimport IconTheme from \"./block/icon-theme\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {appStateChatSocket} from \"../redux/reducer/selector/app-state-selector\";\nimport {Redirect} from \"react-router-dom\";\nimport {appStateActionCreators} from \"../redux/reducer/types/t-app-state\";\n\n\ninterface IProps {\n\n}\n\ntype TProps = IProps\n\nconst Login: React.FC<TProps> = () => {\n  const server = useSelector(appStateChatSocket)\n  const [joinFriendsTextField, setJoinFriendsTextField] = useState(false)\n  const [joinChat, setJoinChat] = useState({status: false, uri: ``})\n  const style = useLoginStyle()\n  const name = useRef()\n  const urlField = useRef()\n  const dispatch = useDispatch()\n\n\n\n\n  const createEndMoveChat = useCallback(() => {\n    const userName = name.current as unknown as HTMLInputElement\n    let idNow = `0`\n    if (joinFriendsTextField) {\n      const idField = urlField.current as unknown as HTMLInputElement\n      idNow = idField.value.split(`/chat/`)[1]\n    }\n    server.joinRoom({id: idNow, name: userName.value}, ({status, id}) => {\n      if (status) {\n        dispatch(appStateActionCreators.setAuthStatus(true))\n        server.setUserName(userName.value)\n        setJoinChat({status: true, uri: `/chat/${id}`})\n      }\n      server.joinRoomDisconnect()\n    })\n  }, [dispatch, server, joinFriendsTextField])\n  if (joinChat.status) {\n    return <Redirect to={joinChat.uri}/>\n  }\n\n  return (<>\n    <Grid className={style.container} container justify={\"center\"}>\n      <Container maxWidth={'sm'}>\n        <Paper>\n          <Grid className={style.paperContainer} container direction={'column'} alignItems={'center'} spacing={4}>\n            {joinFriendsTextField ?\n              <Grid item>\n                <TextField inputRef={urlField} variant={'filled'} placeholder={'your friend\\'s link'} autoFocus required\n                           color={'primary'}/>\n              </Grid>\n              : <Button onClick={() => setJoinFriendsTextField(true)} size={\"small\"}>join friends chat</Button>}\n            <Grid item>\n              <TextField inputRef={name} size={'small'} variant={'outlined'} placeholder={'name'} autoFocus required\n                         color={'primary'}/>\n            </Grid>\n            <Grid item>\n              <Grid container spacing={4}>\n                <Grid item>\n                  <Button onClick={createEndMoveChat}>create chat</Button>\n                </Grid>\n                <IconTheme/>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Container>\n    </Grid>\n  </>)\n}\n\nexport default Login","import {makeStyles} from \"@material-ui/core/styles\";\n\nconst useChatStyle = makeStyles(() => {\n  return {\n    paper: {\n      marginTop: `3vh`,\n      padding: `2vh`\n    },\n    gridContainer: {\n      minHeight: `90vh`,\n    },\n    mainWindow: {\n      width: '90%'\n    },\n    window: {\n      height: `80vh`,\n      padding: `2vh 0`\n    },\n    content: {\n      padding: `0 2vh`,\n      height: `78vh`,\n      overflow: `auto`\n    },\n    input: {\n      width: `100%`\n    },\n    buttonUrl: {\n      whiteSpace: `nowrap`\n    }\n  }\n})\n\nexport default useChatStyle","import React from 'react';\nimport {Grid, Paper} from \"@material-ui/core\";\nimport useChatStyle from \"../../../../style/chat\";\n\ninterface IProps {\n  size:number,\n\n}\n\ntype TProps = IProps\n\nconst WindowLayout: React.FC<TProps> = ({size, children}) => {\n  const style = useChatStyle()\n  return (<>\n    {/*@ts-ignore*/}\n    <Grid item xs={size}>\n      <Paper className={style.window}>\n        <div className={style.content}>\n          {children}\n        </div>\n      </Paper>\n    </Grid>\n  </>)\n}\n\nexport default WindowLayout","import React, {useEffect, useState} from 'react';\nimport WindowLayout from \"./layout/window-layout\";\nimport {useSelector} from \"react-redux\";\nimport {appStateChatSocket} from \"../../../redux/reducer/selector/app-state-selector\";\nimport {IMessage} from \"../../../socket-io/data-interface\";\n\ninterface IProps {\n\n}\n\ntype TProps = IProps\nconst ChatWindow: React.FC<TProps> = (props) => {\n  const server = useSelector(appStateChatSocket)\n  const [chatMessages, setChatMessages] = useState([])\n  useEffect(()=>{\n    const messages:IMessage[] = []\n    server.listenChat(({message, userName})=>{\n      messages.push({message, userName})\n      console.log(messages)\n      if(messages.length){\n        // @ts-ignore\n        setChatMessages(messages.map((obj, index)=>(\n          <React.Fragment key={index}>\n            <div>{obj.userName}:{obj.message}</div>\n          </React.Fragment>\n        )))\n      }\n    })\n    //eslint-disable-next-line\n  }, [])\n  return (<>\n      <WindowLayout size={9}>\n        {chatMessages}\n      </WindowLayout>\n    </>)\n}\n\nexport default ChatWindow","import React, {useEffect, useState} from 'react';\nimport WindowLayout from \"./layout/window-layout\";\nimport {useSelector} from \"react-redux\";\nimport {appStateChatSocket} from \"../../../redux/reducer/selector/app-state-selector\";\n\ninterface IProps {\n\n}\n\ntype TProps = IProps\n\nconst UserListWindow: React.FC<TProps> = (props) => {\n  const server = useSelector(appStateChatSocket)\n  const [userList, setUserList] = useState()\n  useEffect(()=>{\n    server.listenUserList((users)=>{\n      setUserList(users.map((user:string, id:number)=>(\n        <React.Fragment key={user+id}>\n          <div>{user}</div>\n        </React.Fragment>\n      )))\n    })\n  }, [server])\n  return (<>\n    <WindowLayout size={3}>\n      {userList}\n    </WindowLayout>\n  </>)\n}\n\nexport default UserListWindow","import React, {useCallback, useRef} from 'react';\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport IconTheme from \"../../block/icon-theme\";\nimport useChatStyle from \"../../../style/chat\";\nimport {useSelector} from \"react-redux\";\nimport {appStateChatSocket} from \"../../../redux/reducer/selector/app-state-selector\";\n\ninterface IProps {\n\n}\n\ntype TProps = IProps\n\nconst InputChat: React.FC<TProps> = (props) => {\n  const style = useChatStyle()\n  const input = useRef()\n  const server = useSelector(appStateChatSocket)\n  const handleSendMessage = useCallback(()=>{\n    const element = input.current as unknown as HTMLInputElement\n    if(element?.value){\n      server.sendChatMessage(element.value)\n      element.value = ``\n    }\n  }, [server])\n\n  return (<>\n    <Grid item xs={3} sm={7} lg={9}>\n      <TextField inputRef={input} className={style.input} size={'small'} placeholder={'you message'} required color={'primary'}/>\n    </Grid>\n    <Grid item xs={3} sm={1} lg={1}>\n      <Button onClick={handleSendMessage}>send</Button>\n    </Grid>\n    <Grid item xs={6} sm={3} lg={2}>\n      <Grid container>\n        <Grid item xs={6}>\n          <IconTheme/>\n        </Grid>\n      </Grid>\n    </Grid>\n  </>)\n}\n\nexport default InputChat","import React from 'react';\nimport {Container, Paper, Grid} from \"@material-ui/core\";\nimport useChatStyle from \"../../style/chat\";\nimport ChatWindow from \"./blocks/chat-window\";\nimport UserListWindow from \"./blocks/user-list-window\";\nimport InputChat from \"./blocks/input-chat\";\n\ninterface IProps {\n\n}\n\ntype TProps = IProps\n\nconst Chat: React.FC<TProps> = (props) => {\n  const style = useChatStyle()\n  return (<>\n    <Container maxWidth={'lg'}>\n      <Paper className={style.paper}>\n        <Grid className={style.gridContainer} container justify={`space-between`} alignItems={'center'}\n              alignContent={'center'} spacing={2}>\n          <ChatWindow/>\n          <UserListWindow/>\n          <InputChat/>\n        </Grid>\n      </Paper>\n    </Container>\n  </>)\n}\n\nexport default Chat","import React, {FC} from \"react\";\nimport {BrowserRouter, Route, Switch, Link} from \"react-router-dom\";\nimport Auth from \"./auth\";\nimport Login from \"../component/login\";\nimport Chat from \"../component/chat/chat\";\n\nconst Router: FC = () => {\n  return (<>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={Login}/>\n        <Auth path=\"/chat/:id?\" exact component={Chat}/>\n        <Route\n          render={() => (\n            <>\n              <h1>\n                404.\n                <br/>\n                <small>Page not found</small>\n              </h1>\n              <Link to=\"/\">Go to main page</Link>\n            </>\n          )}\n        />\n      </Switch>\n    </BrowserRouter>\n  </>);\n}\n\nexport default Router;\n","import {appStateActionEnum, appStateActionTypes, IAppState} from \"./types/t-app-state\";\nimport ServerChatApi from \"../../socket-io/socket-io\";\n\nconst initialAppState:IAppState = {\n  darkMode:false,\n  authStatus:false,\n  userName: '',\n  chatSocket: new ServerChatApi()\n}\n\nexport function appState(state = initialAppState, action: appStateActionTypes): IAppState {\n  switch (action.type) {\n    case appStateActionEnum.SetDarkMode:\n      return {...state, darkMode:action.payload}\n    case appStateActionEnum.SetAuthStatus:\n      return {...state, authStatus:action.payload}\n    case appStateActionEnum.SetUserName:\n      return {...state, userName: action.payload}\n    default:\n      return state;\n  }\n}","import {io, Socket} from 'socket.io-client'\nimport {ServerApi, URI} from '../const/api'\nimport {IJoinRoom, IMessage} from \"./data-interface\";\n\nexport interface IServerChatApi{\n  sendChatMessage(message:string):void\n  joinRoom({id, name}:{id:string, name:string}, getId:({status, id}:IJoinRoom)=>void):void\n  listenChat(chat:({ message, userName }:IMessage) => void):void\n  listenUserList(userList:({...arg}:any)=>void):void\n  setUserName(user:string):void\n  joinRoomDisconnect(): void\n  disconnect():void\n  userCall(data:any):void\n}\n\nclass ServerChatApi implements IServerChatApi{\n  private _socket: Socket\n  private _userName:string\n  constructor() {\n    this._socket = io(URI.server)\n    this._userName = `admin`\n  }\n  setUserName(user: string){\n    this._userName = user\n  }\n  userCall(data:any) {\n    this._socket.emit(`callUser`, data)\n  }\n\n  sendChatMessage(message:string){\n    this._socket.emit(ServerApi.sendMessage, {userName:this._userName,message})\n  }\n\n  joinRoom({id, name}:{id:string, name:string}, getId:({status, id}:IJoinRoom)=>void){\n    this._socket.emit(ServerApi.joinRom, {id, name})\n    this._socket.on(ServerApi.joinRom, getId)\n  }\n  joinRoomDisconnect(){\n    this._socket.off(ServerApi.joinRom)\n  }\n\n  listenChat(chat: ({message, userName}: IMessage) => void) {\n    this._socket.on(ServerApi.listenChat, chat)\n  }\n\n  listenUserList(userList:(users:string[])=>void){\n    this._socket.on(ServerApi.listenUserList, userList)\n  }\n  disconnect(){\n    if(this._socket.connected){\n      this._socket.disconnect()\n    }\n  }\n}\n\n\nexport default ServerChatApi\n\n","import { combineReducers } from 'redux';\nimport {appState} from \"./app-state\";\n\nconst reducer = combineReducers({appState})\n\nexport type StoreType = ReturnType<typeof reducer>\nexport default reducer","import { createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport reducer from \"./reducer/reducer\";\nimport {appStateActionCreators} from \"./reducer/types/t-app-state\";\n\nconst store: any = createStore(reducer, composeWithDevTools());\nstore.dispatch(appStateActionCreators.setDarkMode(window.matchMedia(`(prefers-color-scheme:dark)`).matches))\n\n\nexport default store","import { grey} from \"@material-ui/core/colors\";\n\nconst DarkTheme = {\n  primary:{\n    light: grey[400],\n    main: grey[700],\n    dark: grey[900]\n  },\n}\n\nexport default DarkTheme","\nconst WhiteTheme = {\n\n}\n\nexport default WhiteTheme","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {createMuiTheme, ThemeProvider} from \"@material-ui/core/styles\";\nimport DarkTheme from \"../style/theme/dark-theme\";\nimport WhiteTheme from \"../style/theme/white-theme\";\nimport {appStateDarkModeSelector} from \"../redux/reducer/selector/app-state-selector\";\n\ninterface IProps {\n\n}\n\ntype TProps = IProps\n\nconst MaterialUiTheme: React.FC<TProps> = ({children}) => {\n  const prefersDarkMode = useSelector(appStateDarkModeSelector)\n\n  let theme = React.useMemo(() =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light', ...prefersDarkMode ? DarkTheme : WhiteTheme\n        },\n      }),\n    [prefersDarkMode],\n  );\n  return (<>\n    <style>{`\n      body {\n        background: ${prefersDarkMode ? \"darkslategray\" : \"#e9ebee\"};\n      }\n      /* width */\n      ::-webkit-scrollbar {\n         width: 10px;\n      }\n\n      /* Track */\n      ::-webkit-scrollbar-track {\n         background: ${prefersDarkMode ? `#555` : \"gray\"}; \n      }\n \n      /* Handle */\n      ::-webkit-scrollbar-thumb {\n         background: ${prefersDarkMode ? \"gray\" : `#633f28`}; \n      }\n\n       /* Handle on hover */\n      ::-webkit-scrollbar-thumb:hover {\n         background: ${prefersDarkMode ? \"#8a3324\" : `#cd793b`}\n\n      }\n    `}\n    </style>\n    <ThemeProvider theme={theme}>\n      {children}\n    </ThemeProvider>\n  </>)\n}\n\nexport default MaterialUiTheme","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './router/router';\nimport {Provider} from 'react-redux'\nimport store from \"./redux/store\";\nimport MaterialUiTheme from \"./router/material-ui-theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <MaterialUiTheme>\n        <Router/>\n      </MaterialUiTheme>\n    </Provider>\n  </React.StrictMode>,\ndocument.getElementById('root')\n)\n;\n\n"],"sourceRoot":""}